import java.util.Scanner;

public class CommandLineInterface {
    private static final String PROMPT = "> ";
    private static final String INVALID_COMMAND_MSG = "Invalid command. Please try again.";

    private GameManager gameManager;
    private Player player;
    private Room currentRoom;
    private Scanner scanner;

    public CommandLineInterface(GameManager gameManager) {
        this.gameManager = gameManager;
        this.player = gameManager.getPlayer();
        this.currentRoom = gameManager.getCurrentRoom();
        scanner = new Scanner(System.in);
    }

    public void start() {
        System.out.println("Добро пожаловать в игру!");
        gameManager.printCurrentRoomDescription();
        while (true) {
            System.out.print(PROMPT);
            String command = scanner.nextLine().trim();
            processCommand(command);
        }
    }

    private void processCommand(String command) {
        String[] parts = command.split(" ");
        String action = parts[0].toLowerCase();

        switch (action) {
            case "move":
                if (parts.length == 2) {
                    String directionStr = parts[1].toUpperCase();
                    Direction direction = Direction.valueOf(directionStr);
                    gameManager.movePlayer(direction);
                    gameManager.printCurrentRoomDescription();
                } else {
                    System.out.println(INVALID_COMMAND_MSG);
                }
                break;
            case "pickup":
                Direction pickupDirection = getDirectionFromInput(parts);
                if (pickupDirection != null) {
                    gameManager.pickUpItem(pickupDirection);
                    gameManager.printInventory();
                } else {
                    System.out.println(INVALID_COMMAND_MSG);
                }
                break;
            case "attack":
                if (currentRoom.getMonster() != null) {
                    Direction attackDirection = getDirectionFromInput(parts);
                    if (attackDirection != null) {
                        gameManager.attackMonster(attackDirection);
                    } else {
                        System.out.println(INVALID_COMMAND_MSG);
                    }
                } else {
                    System.out.println("There is no monster to attack.");
                }
                break;
            case "use":
                if (parts.length == 2) {
                    int itemIndex = Integer.parseInt(parts[1]) - 1;
                    gameManager.useItem(itemIndex);
                    gameManager.printInventory();
                } else {
                    System.out.println(INVALID_COMMAND_MSG);
                }
                break;
            case "inventory":
                gameManager.printInventory();
                break;
            case "quit":
                System.out.println("Пока!");
                System.exit(0);
            default:
                System.out.println(INVALID_COMMAND_MSG);
        }
    }

    private Direction getDirectionFromInput(String[] parts) {
        if (parts.length == 2) {
            String directionStr = parts[1].toUpperCase();
            return Direction.valueOf(directionStr);
        } else {
            return null;
        }
    }
}
